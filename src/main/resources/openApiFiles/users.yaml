openapi: 3.1.0
info:
  title: Users Management Demo - OpenAPI 3.1
  description: |-
    This is a sample User Managemnt Server based on the OpenAPI 3.1 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). 
    
    

  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: '1.0.11'
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: http://localhost:8080
paths:
  /users:
    get:
      tags:
        - user
      summary: Finds users
      description: Get all users
      operationId: getUsers
      responses:
        '200':
           description: successful operation
           content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserResponse'
              application/xml:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/UserResponse'
        '400':
           description: Invalid tag value
  /user/{userId}:
   get:
     tags:
       - user
     summary: Find user by id
     description: Find user by given id
     operationId: getUserById
     parameters:
       - name: userId
         in: path
         description: ID of user to return
         required: true
         schema:
           type: integer
           format: int64
     responses:
       '200':
         description: successful operation
         content:
           application/json:
             schema:
               $ref: '#/components/schemas/UserResponse'
           application/xml:
             schema:
               $ref: '#/components/schemas/UserResponse'
       '400':
         description: Invalid tag value
       '404':
         description: User not found
  /user:
    post:
      tags:
        - user
      summary: Save new user
      description: Save new user
      operationId: saveUser
      requestBody:
        description: Create new user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
          application/xml:
            schema:
              $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
            description: succesful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserResponse'
              application/xml:
                schema:
                  $ref: '#/components/schemas/UserResponse'
        '400':
           description: Invalid tag value
  /user/{nif}:
    put:
      tags:
        - user
      summary: Update user 
      description: Update an exisitng user by nif
      operationId: updateUserByNif
      parameters:
        - name: nif
          in: path
          description: nif to update user
          required: true
          schema:
             type: string
      requestBody:
        description: Updated user
        content:
          application/json:
             schema:
               $ref: '#/components/schemas/UserRequest'
          application/xml:
             schema:
               $ref: '#/components/schemas/UserRequest'
        required: true
      responses:
        '200':
           description: succesful operation
           content:
             application/json:
               schema:
                 $ref: '#/components/schemas/UserResponse'
             application/xml:
               schema:
                 $ref: '#/components/schemas/UserResponse'
        '400':
          description: Invalid tag value
    delete:
        tags: 
          - user
        summary: Delete user
        description: Delete user by nif
        operationId: deleteUserByNif
        parameters:
          - name: nif
            in: path
            description: nif to delete user
            required: true
            schema:
              type: string
        responses:
         '200':
            description: succesful operation
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/UserResponse'
              application/xml:
                schema:
                  $ref: '#/components/schemas/UserResponse'
         '204':
            description: succesful operation
         '400':
            description: Invalid tag value
components:
# Descriptions of common components
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          examples: [1]
        nif:
          type: string
          examples: ['00000000T']
        nombre:
          type: string
          examples: ['juan']
        email:
          type: string
          examples: [email@email.es]
      xml:
        name: UserResponse
    UserRequest:
      required:
        - name
        - nif
        - email
      type: object
      properties:
        name:
          type: string
          examples: [Juan]
        nif:
          type: string
          examples: [00000000T]
        email:
          type: string
          examples: [email@email.es]
      xml:
        name: UserRequest
        
        